#!/usr/bin/python2
import rospy
import math
from ivy.std_api import *
from std_msgs.msg import String
#from geometry_msgs.msg import Pose2D
from tracking.msg import TaggedPose2D
import time
"""kill_log resides in the upper directory to this script"""
import os
parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
os.sys.path.insert(0,parentdir)
import kill_log

# global values
deg2rad = math.pi / 180
rad2deg = 180 / math.pi
lat = 52.138821 * deg2rad
lon = 11.645634  * deg2rad

class IvyCalibrationNode:
    def __init__(self):
        self.myKillLog = kill_log.KillLog()
    
    def IvyInitStart(self):
        """ Initializes the Ivy Server and ROS Subscriber

        Should only be called once per session.
        """
	

        try:
            IvyInit('Calibration Node', '', 0)
        except AssertionError:
            print('Assertion Error in IvyInit(!= none), is there a server already running? Exiting')
            IvyStop()
            raise SystemExit()
        IvyStart()
        try:
            self.initRosSub()
        except rospy.exceptions.ROSInitException as e:
            print('\nInitialization failed due to ROS error, exiting...')
            self.IvyInitStop()
        time.sleep(1)
        print('Ivy Calibration Node ready!')
	
        # initial value for oldTime
	
	global oldX
	oldX = 0
	global oldY
	oldY = 0
	global oldZ
	oldZ = 0
	global tow
	tow = 0
        global oldTime 
	oldTime = rospy.get_rostime()


    def IvyInitStop(self):
        """Stops the Ivy Server.
        """
        time.sleep(1)
        IvyStop()


    def handlePos(self, data):
        """ Callback for the ROS subscriber.


        """
        global oldTime
	global oldX
	global oldY
	global oldZ
	global tow

	# offsets for Latitude = 52.1205 and Longitude = 11.6276 (Rotation around Y and Z)
	offsetX =  math.cos(lat)*math.cos(lon)*data.x - math.cos(lat)*math.sin(lon)*data.y
	offsetY = -math.sin(lon)* data.x              + math.cos(lon) * data.y
	offsetZ = -math.sin(lat)*math.cos(lon)*data.x + math.sin(lat)*math.sin(lon)*data.y
	
	#rospy.loginfo("Offsets %f, %f, %f", offsetX, offsetY, offsetZ)
	rospy.loginfo("Distances %f, %f, %f", offsetX - oldX, offsetY - oldY, offsetZ - oldZ)


	# getting time difference between now and last run
	now = data.header.stamp
	timediff = 0
	if( (now.secs - oldTime.secs) == 0):
		timediff = now.nsecs - oldTime.nsecs
	else:
		timediff = 1000000000 + now.nsecs - oldTime.nsecs
	oldTime = now
	timediff = timediff / 1000000000.0
	
	rospy.loginfo("timediff float %f", timediff)

	# geting difference for X pos and Y pos and Z pos and calculate speed
	
	ecef_xd= (offsetX - oldX) / timediff	
	ecef_yd= (offsetY - oldY) / timediff	
	ecef_zd= (offsetZ - oldZ) / timediff	
	
	rospy.loginfo("Speeds %f, %f, %f", ecef_xd, ecef_yd, ecef_zd)

	oldX = offsetX
	oldY = offsetY
	oldZ = offsetZ

	# for TOW

	if (timediff < 1.0):
		tow += int(timediff * 1000)


	# for Course
	# for Course we need angle (in rad) of LTP.  We get LTP by ECEF and LLA and Rot Mat of ECEF 2 ENU

	# Rot_ecef2enu

	enu_xd = -math.sin(lon)*ecef_xd               + math.cos(lon)*ecef_yd
	enu_yd = -math.sin(lat)*math.cos(lon)*ecef_xd + (-math.sin(lat)*math.sin(lon)*ecef_yd) + math.cos(lat)*ecef_zd
	enu_zd =  math.cos(lat)*math.cos(lon)*ecef_xd + math.cos(lat)*math.sin(lon)*ecef_yd    + math.sin(lat)*ecef_zd
	
	course = math.atan2(enu_yd, enu_xd)
	
	rospy.loginfo("course %f", course * rad2deg)
	# course in rad*1e7, [0, 2*Pi]*1e7 (CW/north)
	course = int(course * 10000000)

	earthRadius = 636485000
	ecef_magnitude = math.sqrt((384205200 + offsetX)*(384205200 + offsetX) + (79184900 + offsetY)*(79184900 + offsetY) + (501233200 + offsetZ)*(501233200 + offsetZ))
	hmsl = (ecef_magnitude - earthRadius) / 10 # in mm

                             #AC_ID, numsv, ecef_x, ecef_y, ecef_z, 					     lat, lon, alt, hmsl, ecef_xd, ecef_yd, ecef_zd, tow, course
        self.IvySendRemoteGPS(1,     6,     384205200 + offsetX, 79184900 + offsetY, 501233200 + offsetZ,      0,   0,   0,   hmsl,  ecef_xd, ecef_yd, ecef_zd, tow, course)


    def initRosSub(self):
        """ Initializes the ROS subscriber.

        Is automatically called during the Ivy initialization process
        in IvyInitStart().
        """
        try:
            rospy.init_node('poseListener', anonymous=False)
        except KeyboardInterrupt:
            print('\nROS initialization canceled by user')
        except rospy.exceptions.ROSInitException as e:
            print('\nError Initializing ROS:')
            print(str(e))
            raise
	
        #rospy.Subscriber("copters/0/pose", Pose2D, self.handlePos)
	rospy.Subscriber("/copter/blue", TaggedPose2D, self.handlePos)


    def IvyGetPos(self):
        """Simply returns the position grabbed via ROS to the caller

        """
        try:
            return copterPos
        except NameError as e:
            print("CopterPos not yed defined! (No data from ROS?):")
            print(str(e))

    def IvyGetPosList(self):
        """Returns the position to a list for less dependency with ros
           Returns
           -------
           List
        """
        position = self.IvyGetPos()
        return [position.x, position.y, position.theta]

    def IvySendCalib(self,param_ID, AC_ID, value):
        """Sends the given parameter via Ivy

        AC_ID:      ID of the aricraft to be calibrated
        param_ID:   ID of the parameter to be calibrated
                     phi   = 58 roll
                     theta = 59 pitch
                     psi   = 60 yaw
        value:      value to be set for the parameter !in degrees!
        """
        print("sending calib msg")
        IvySendMsg('dl SETTING %d %d %f' %
                    (AC_ID,
                    param_ID,
                    value
                    ))


    def IvySendKill(self, AC_ID):
        """Sends a kill message to the aircraft

        """
        IvySendMsg('dl KILL %d 1' %
                    (AC_ID
                    ))
        
    def SetInDeadZone(self,inDeadZone):
        self.myKillLog.inDeadZone = inDeadZone

    def IvySendCalParams(self, AC_ID, turn_leds, roll, pitch, yaw):
        IvySendMsg('dl CALPARAMS %d %d %f %f %f' %
                    (AC_ID, turn_leds, roll, pitch, yaw
                    ))

    def IvySendCopterPose(self, AC_ID, posX, posY, theta):
        IvySendMsg('dl COPTERPOSE %d %f %f %f' %
                    (AC_ID, posX, posY, theta
                    ))


    def IvySendRemoteGPS(self, AC_ID, numsv, ecef_x, ecef_y, ecef_z, lat, lon, alt, hmsl, ecef_xd, ecef_yd, ecef_zd, tow, course):
        IvySendMsg('dl REMOTE_GPS %d %d %d %d %d %d %d %d %d %d %d %d %d %d' %
                    (AC_ID, numsv, ecef_x, ecef_y, ecef_z, lat, lon, alt, hmsl, ecef_xd, ecef_yd, ecef_zd, tow, course
                    ))



    def IvySendUnKill(self, AC_ID):
        """Sends an unkill message to the aircraft

        """
        IvySendMsg('dl KILL %d 0' %
                    (AC_ID
                    ))



    def IvySendSwitchBlock(self, AC_ID, block_ID):
        """Sends a message to switch the flight plan

        """
        IvySendMsg('dl BLOCK %d %d' %
                    (block_ID,
                     AC_ID,
                     ))
                     
    def SaveIvyKillLog(self):
        self.myKillLog.saveLog()
